算数运算有以下几种方法:
名称		语法				范例
算数扩展	$((算术式))			r=$((8+6))
expr		expr 算术式			r=(expr '8+6')
$[]		$[算术式]			r=$[8+6]
declare		declare -i 变量=算术式		declare -i r=8+6
let		let 算术式			let r=8+6
bc		bc 文件/stdin			echo "2+3" | bc

#1.语法:$((算术式))
$((${j:-8}+2))
$((g-1))		#注意:变量g不存在或为空时,默认值为0
$((var-2))		#注意:变量前最好不要加$,因为如果var不存在会报错
$((n=i<100?10:2))

#2.语法:expr 表达式
r=(expr 4 \* 8)		#注意:运算符和表达式之间必须有空格隔开,使用运算符之前使用\先转义后在使用.
r=(expr 2 ** 3)		#注意:expr没有乘方运算.

#3.语法:$[算术式]
r=$[r+1]

#4.语法:declare 表达式
declare -i r
r=8+6			#注意:运算符和操作数时间必须紧密相连,没有空格
r=4**2			#注意:变量前没有$
r=r+2			#注意:运算符不需要转义\

#5.语法:let 算术式.let使用方法和declare相似
let "i = i + 3"		#注意:操作数和运算符之间可以有空格符,但是要用""包含

#6.语法:bc 含有算式的文件/stdin.bc接收来自stdin的表达式或者从指定文件中读取算术式.是一种数学运算的高级工具.
echo "3/8" | bc		#注意:bc后不能直接跟算数表达式

Bash运算符优先级表:
优先级		说明
1		i++运算后加1,i--运算后减1
2		++i运算前加1,--i运算前减1
3		-负号,+正号
4		!逻辑非,~按位取反
5		**乘方
6		*乘法,/除法,%取余
7		+加,-减
8		<<按位左移,>>按位右移
9		<=,>=,<>不等于
10		==相等,!=
11		&按位与
12		^按位互斥
13		|按位或
14		&&逻辑与
15		||逻辑或
16		条件测试?式子1:式子2
17		=.*=,/=,+=,-=,<<=,>>=,&=,^=,|=
18		,(逗号)运算
