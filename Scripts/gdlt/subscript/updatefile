#!/bin/bash
## 用于检查本地/服务器上的tomcat是否已经启动
## 示例 

target_host=""  ## 服务器
target_project=""  ## 项目名称
update_type="" ## 更新方式, small只更新静态文件, large更新动/静态文件, all更新所有文件且仅限于本地服务器使用

## 获取主机名
while getopts h:p:t: params
do
	case $params in
	h)
		target_host=$OPTARG
		;;
	p)
		target_project=$OPTARG
		;;
	t)
		update_type=$OPTARG
		;;
	esac
done

if [ -z "$target_host" ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 没有指定目标服务器.")}'
	exit 1
fi

if [ -z "$target_project" ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 没有指定目标项目名称.")}'
	exit 1
fi

## 读取配置文件中服务器信息. 如果配置文件中存在任何错误, 则在这一步就会报错
cd $SUBSCRIPT_PATH/awk ## 进入awk程序根目录
serverInfo=`gawk -f server.awk -v server=$target_host -v project=$target_project $GDLTCONFIG`

if [ $? -ne 0 ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 读取配置文件服务器信息时出错, 错误信息请查看[**server.awk**]日志信息.")}'
	exit 1
fi

for line in `echo $serverInfo`
do
	eval $line
done

## 读取配置文件中项目信息. 如果配置文件中存在任何错误, 则在这一步就会报错
projectInfo=`gawk -f project.awk -v project=$target_project $GDLTCONFIG`

if [ $? -ne 0 ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 读取配置文件中的项目信息时出错, 错误信息请查看[**project.awk**]日志信息.")}'
	exit 1
fi

for line in `echo $projectInfo`
do
	eval $line
done

## 生成删除/复制命令
copycommand_prefix=""	## copy命令的前缀
copycommand_suffix=""	## copy命令的后缀
removecommand_prefix=""	## remove命令的前缀
removecommand_suffix=""	## remove命令的后缀

if [ $target_host == "localhost" ]; then 
	copycommand_prefix="cp -r"
	removecommand_prefix="rm -rf"
else
	copycommand_prefix="scp -r"
	copycommand_suffix="$target_host:"
	removecommand_prefix="ssh $target_host ' rm -rf"
	removecommand_suffix="'"
fi

## 更新动态文件
if [ $update_type == "large" -a -n "$_project_dynamic_source" ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 开始为服务器['$target_host']中的项目['$target_project']更新动态文件.")}'
	i=1
        for line in `echo $_project_dynamic_source | tr ':' '\n'`
        do
		target_file_relative_path=`echo $_project_dynamic_target | cut -d ':' -f $i` ## 目标文件相对于项目根目录的相对位置

		remove_command=$removecommand_prefix' '$_server_path/'webapps'/$target_project/$target_file_relative_path' '$removecommand_suffix
		echo $remove_command | gawk -f $LOG_MAKER -e '{LogMark("Command: [**updatefile**] " $0)}'
		eval $remove_command &> /dev/null

		copy_command=$copycommand_prefix' '$_project_resource_basepath/$line' '$copycommand_suffix$_server_path/'webapps'/$target_project/$target_file_relative_path
		echo $copy_command | gawk -f $LOG_MAKER -e '{LogMark("Command: [**updatefile**] " $0)}'
		eval $copy_command &> /dev/null

		((i++))
	done
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 已完成对服务器['$target_host']中项目['$target_project']的动态文件更新过程.")}'
fi

## 只要不是全部更新, 都需要更新静态文件
if [ $update_type != "all" -a -n "$_project_static_source" ]; then
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 开始为服务器['$target_host']中的项目['$target_project']更新静态文件.")}'
	i=1
	for line in `echo $_project_static_source | tr ':' '\n'`
	do
		target_file_relative_path=`echo $_project_static_target | cut -d ':' -f $i` ## 目标文件相对于项目根目录的相对位置

		remove_command=$removecommand_prefix' '$_server_path/'webapps'/$target_project/$target_file_relative_path' '$removecommand_suffix
		echo $remove_command | gawk -f $LOG_MAKER -e '{LogMark("Command: [**updatefile**] " $0)}'
		eval $remove_command &> /dev/null

		copy_command=$copycommand_prefix' '$_project_resource_basepath/$line' '$copycommand_suffix$_server_path/'webapps'/$target_project/$target_file_relative_path
		echo $copy_command | gawk -f $LOG_MAKER -e '{LogMark("Command: [**updatefile**] " $0)}'
		eval $copy_command &> /dev/null

		((i++))
	done
	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 已完成对服务器['$target_host']中项目['$target_project']的静态文件更新过程.")}'
fi

## 全部更新模式
if [ $update_type == "all" ]; then
	if [ $target_host != "localhost" ]; then
		gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 不能对非本地服务器['$target_host']进行[全部更新]模式的项目更新.")}'
		exit 1
	fi

	gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 开始为本地服务器[localhost]中的项目['$target_project']实施全部更新操作.")}'
	ant -buildfile $JAVAFILEPATH/$target_project/build.xml full | gawk -f $LOG_MAKER -e '{LogMark("Command: [**updatefile.ant**] " $0)}'

	if [ $? -ne 0 ]; then
		gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Error: [**updatefile**] 对项目['$target_project']进行[全部更新]模式的更新时出错, 错误信息请查看[**updatefile.ant**]日志错误.")}'
		exit 1
	else
		gawk -f $LOG_MAKER -e 'BEGIN {LogMark("Info: [**updatefile**] 已完成对本地服务器[localhost]中项目['$target_project']的全部更新过程.")}'
	fi
fi
